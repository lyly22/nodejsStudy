.help
.break
.clear
.exit  退出repl
.help
.load   .load cmd.log
.save   保存命令   .save cmd.log

切换盘符  e:

mime.lookup()

curl http:localhost:8080/clock.html-->git bash

global == window 全局对象
module  当前模块对象
exports 导出对象
require 加载模块的方法
__dirname  当前模块所在的目录的绝对路径
__firname  当前模块的绝对路径

console.trace();//显示当前的调用堆栈

process.stdout.write('hello');相当于console.log();
process.stdin.on('data',function(data){  监听控制台，模拟控制台输出
    console.log(data.toString());
}

process.nextTick放在当前队列的底部
setTimeout放在下个队列的顶部
process.nextTick>setTimeout>setImmediate>异步IO

util.inherits(constructor, superConstructor)是一个实现对象间原型继承的函数。

util.inspect(object,[showHidden],[depth],[colors])是一个将任意对象转换 为字符串的方法，通常用于调试和错误输出。它至少接受一个参数 object，即要转换的对象。
showHidden 是一个可选参数，如果值为 true，将会输出更多隐藏信息。
depth 表示最大递归的层数，如果对象很复杂，你可以指定层数以控制输出信息的多 少。如果不指定depth，默认会递归2层，指定为 null 表示将不限递归层数完整遍历对象。 
color 值为 true，输出格式将会以ANSI 颜色编码，通常用于在终端显示更漂亮 的效果。
特别要指出的是，util.inspect 并不会简单地直接把对象转换为字符串，即使该对 象定义了toString 方法也不会调用。

util.isArray(object)

util.isRegExp(object)

util.isDate(object)

util.isError(object)

缓存
main
resolve
cache
delete cache

require.cache
require.cache[require.resolve('./a')]

module
module.id  模块的绝对路径
module.filename模块的文件名、模块的绝对路径
module.loaded  是否加载完成
module.parent  父模块，即调用当前模块的模块对象
module.children 子模块，即当前模块require的模块对象
module.exports  导出对象
module.paths    模块的查找路径

npm search 
npm view 
npm install -g express
npm root -g  查看全局安装路径
npm config set prefix 修改全局路径
npm list 显示当前目录下所有包
npm list -g  显示全局下所有包
npm uninstall gulp 卸载本地包
npm uninstall gulp -g 卸载全局包
npm update gulp  更新本地包
npm update -g gulp   更新全局包
npm update 更新当前目录下所有的包
npm update -g 更新全局所有的包

锁定版本号
npm shrinkwrap 如果报错说明有模块没有放在packgejson依赖里
npm prune 将没有写进依赖的模块移除

npm adduser注册

将其他进制转成十进制
parseInt('11',2);将二进制的11转成10进制
parseInt('11',8);将八进制的11转成10进制
将十进制转成其他进制
(11).toString(2);将十进制11转成2进制
(11).toString(8);将十进制11转成8进制






























/----------------------/

Node的全局对象

__filename
注意此属性并不是全局对象的属性，而只是node在我们注入模块的参数，可以在模块内直接使用. _filename 表示当前正在执行的脚本的文件名。
它将输出文件所在位置的绝对路径

__dirname
注意此属性并不是全局对象的属性，而只是node为我们注入模块的参数，可以在模块内直接使用. __dirname 表示当前执行脚本所在的目录。

/----------------------/

fs.readdir//传递两个参数 err 和 files，files是一个包含 “ 指定目录下所有文件名称的” 数组。
fs.unlink//删除文件
fs.mkdir//以异步的方式创建文件目录。如果目录已存在，将抛出异常。
fs.rmdir
fs.exists//判断一个文件或目录是否存在
fs.readdir//读取目录下面的文件列表，files是一个包含 “ 指定目录下所有文件名称的” 数组
fs.stat//读取的文件信息，回调函数接受err,stats,stats.isDirectory()判断是否是一个目录；stats.isFile()判断是否是一个文件

watchfile方法监听一个文件，如果该文件发生变化，就会自动触发回调函数。
unwatchfile方法用于解除对文件的监听。

createReadStream()//往往用于打开大型的文本文件，创建一个读取操作的数据流。所谓大型文本文件，指的是文本文件的体积很大，
读取操作的缓存装不下，只能分成几次发送，每次发送会触发一个data事件，发送结束会触发end事件。
createWriteStream()//创建一个写入数据流对象，该对象的write方法用于写入数据，end方法用于结束写入操作。

path.resolve//相当于不断的调用系统的cd命令
path.basename//提取出用 ‘/' 隔开的path的最后一部分；参数：p 要处理的path   ext 要过滤的字符
path.extname//返回path路径文件扩展名，如果path以 ‘.' 为结尾，将返回 ‘.'，如果无扩展名 又 不以'.'结尾，将返回空值
path.sep//路径分隔符
path.delimiter//环境变量分隔符

/----------------------/
install命令总是安装模块的最新版本，如果要安装模块的特定版本，可以在模块名后面加上@和版本号。

--save：模块名将被添加到dependencies，可以简化为参数-S。 --save-dev: 模块名将被添加到devDependencies，可以简化为参数-D。

$ npm update [package name]
$ npm update -global [package name]
$ npm uninstall [package name]
$ sudo npm uninstall [package name] -global


/----------------------/
url.parse//把一个字符串转成对象
url.format//把一个对象转成字符串



module.filename：开发期间，该行代码所在的文件。
__filename：始终等于 module.filename。
__dirname：开发期间，该行代码所在的目录。
process.cwd()：运行node的工作目录，可以使用  cd /d 修改工作目录。
require.main.filename：用node命令启动的module的filename, 如 node xxx，这里的filename就是这个xxx。
require()方法的坐标路径是：module.filename；fs.readFile()的坐标路径是：process.cwd()。

/----------------------/
process对象提供以下方法：

process.exit()：退出当前进程。
process.cwd()：返回运行当前脚本的工作目录的路径。_
process.chdir()：改变工作目录。
process.nextTick()：将一个回调函数放在下次事件循环的顶部。

process.argv
是命令行参数数组，第一个元素是node.exe可执行文件的路径,第二个参数是执行的脚本文件所有路径，从第三个元素开始每个参数是一个运行时传入的参数

url.parse
url.format

querystring.parse(str,'@','=')
querystring.stringify(obj,'@','=')